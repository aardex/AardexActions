name: terraform-deploy
description: Deploy Terraform to Azure

inputs:
  azure-credentials:
    required: true
    description: "Azure credentials for authentication"
  directory:
    required: false
    default: 'terraform'
    description: Terraform directory to deploy
  apply:
    required: false
    default: 'false'
    description: "Whether to run terraform apply"
  tfvars-content:
    required: false
    description: "Content of the terraform.tfvars file (as a single string, from secrets or workflow input)"
  github-token:
    required: true
    description: "GitHub token for private module access"

runs:
  using: composite
  steps:
    - name: Extract Azure credentials
      shell: bash
      id: creds
      run: |
        echo "ARM_CLIENT_ID=$(echo '${{ inputs.azure-credentials }}' | jq -r .clientId)" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=$(echo '${{ inputs.azure-credentials }}' | jq -r .clientSecret)" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(echo '${{ inputs.azure-credentials }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(echo '${{ inputs.azure-credentials }}' | jq -r .tenantId)" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.13.3

    - name: Configure Git credential URL
      shell: bash
      run: |
        git config --global url."https://${{ inputs.github-token }}@github.com/".insteadOf "https://github.com/"

    - name: Create terraform.tfvars from input
      if: ${{ inputs.tfvars-content && inputs.tfvars-content != '' }}
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        echo "üìù Creating terraform.tfvars from input"
        cat <<EOF > terraform.tfvars
        ${{ inputs.tfvars-content }}
        EOF
        echo "::add-mask::${{ inputs.tfvars-content }}"
        echo "‚úÖ terraform.tfvars created successfully"

    - name: Upload tfvars Artifact
      if: ${{ inputs.tfvars-content && inputs.tfvars-content != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: terraform-tfvars
        path: ${{ inputs.directory }}/terraform.tfvars
        if-no-files-found: error

    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: terraform init -upgrade -input=false

    - name: Terraform Validate
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: terraform validate -no-color

    - name: Terraform Plan
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        if [ -f "terraform.tfvars" ]; then
          echo "‚úÖ terraform.tfvars found, using it."
          terraform plan \
            -input=false \
            -no-color \
            -var-file="terraform.tfvars" \
            -out=tfplan
        else
          echo "‚ö†Ô∏è No terraform.tfvars found, running plan without it."
          terraform plan \
            -input=false \
            -no-color \
            -out=tfplan
        fi

    - name: Upload Plan Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ${{ inputs.directory }}/tfplan

    - name: Terraform Apply (opt-in)
      if: ${{ inputs.apply == 'true' }}
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: terraform apply -input=false -auto-approve tfplan
