name: terraform-forat-validate
description: Format and validate Terraform module for a given directory

inputs:
  azure-credentials:
    required: true
    description: "Azure credentials in JSON format"
  tfvars-content:
    description: "Content for terraform.tfvars file (as a single string, from secrets or workflow input)"
    required: false
  directory:
    description: Directory to format and validate
    required: true
    default: '.'
  github-token:
    required: true
    description: "GitHub token for authentication"

runs:
  using: composite
  steps:
    - name: Extract Azure credentials
      shell: bash
      id: creds
      run: |
        echo "ARM_CLIENT_ID=$(echo '${{ inputs.azure-credentials }}' | jq -r .clientId)" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=$(echo '${{ inputs.azure-credentials }}' | jq -r .clientSecret)" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(echo '${{ inputs.azure-credentials }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(echo '${{ inputs.azure-credentials }}' | jq -r .tenantId)" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.13.3

    - name: Configure Git credential URL
      shell: bash
      run: |
        git config --global url."https://${{ inputs.github-token }}@github.com/".insteadOf "https://github.com/"

    - name: Create terraform.tfvars from input
      if: ${{ inputs.tfvars-content && inputs.tfvars-content != '' }}
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        echo "üìù Creating terraform.tfvars from input"
        cat <<EOF > terraform.tfvars
        ${{ inputs.tfvars-content }}
        EOF
        echo "::add-mask::${{ inputs.tfvars-content }}"
        echo "‚úÖ terraform.tfvars created successfully"

    - name: Format Terraform files
      id: format
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        terraform fmt -check -recursive
        if [ $? -ne 0 ]; then
          echo "Terraform files are not formatted correctly."
          exit 1
        fi
        
    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: terraform init -upgrade -input=false

    - name: Validate Terraform files
      id: validate
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        terraform validate -no-color
        if [ $? -ne 0 ]; then
          echo "Terraform files are not valid."
          exit 1
        fi